create table salesforce.campaign_type__c
(
	id serial not null
		constraint campaign_type__c_pkey
			primary key,
	sfid varchar(18),
	"_hc_err" text,
	systemmodstamp timestamp,
	createddate timestamp,
	description__c varchar(255),
	isdeleted boolean,
	name varchar(80),
	"_hc_lastop" varchar(32)
)
;

create unique index hcu_idx_campaign_type__c_sfid
	on campaign_type__c (sfid)
;

create index hc_idx_campaign_type__c_systemmodstamp
	on campaign_type__c (systemmodstamp)
;

create function salesforce.hc_campaign_type__c_status() returns trigger
	language plpgsql
as $$
BEGIN
                      IF (get_xmlbinary() = 'base64') THEN  -- user op
                        NEW._hc_lastop = 'PENDING';
                        NEW._hc_err = NULL;
                        RETURN NEW;
                      ELSE  -- connect op
                        IF (TG_OP = 'UPDATE' AND NEW._hc_lastop IS NOT NULL AND NEW._hc_lastop != OLD._hc_lastop) THEN
                            RETURN NEW;
                        END IF;

                        NEW._hc_lastop = 'SYNCED';
                        NEW._hc_err = NULL;
                        RETURN NEW;
                      END IF;
                    END;
$$
;

create trigger hc_campaign_type__c_status_trigger
	before insert or update
	on campaign_type__c
	for each row
	execute procedure salesforce.hc_campaign_type__c_status()
;

create function salesforce.hc_campaign_type__c_logger() returns trigger
	language plpgsql
as $$
DECLARE
            trigger_row "salesforce"."_trigger_log";
            excluded_cols text[] = ARRAY['_hc_lastop', '_hc_err']::text[];

        BEGIN
            -- VERSION 3 --
            trigger_row = ROW();
            trigger_row.id = nextval('"salesforce"."_trigger_log_id_seq"');
            trigger_row.action = TG_OP::text;
            trigger_row.table_name = TG_TABLE_NAME::text;
            trigger_row.txid = txid_current();
            trigger_row.created_at = clock_timestamp();
            trigger_row.state = 'READONLY';

            IF (TG_OP = 'DELETE') THEN
                trigger_row.record_id = OLD.id;
                trigger_row.old = hstore(OLD.*) - excluded_cols;
                IF (OLD.sfid IS NOT NULL) THEN
                    trigger_row.sfid = OLD.sfid;
                ELSE
                    trigger_row.state = 'IGNORE';
                END IF;
            ELSEIF (TG_OP = 'INSERT') THEN
                trigger_row.record_id = NEW.id;
                trigger_row.values = hstore(NEW.*) - excluded_cols;
            ELSEIF (TG_OP = 'UPDATE') THEN
                trigger_row.record_id = NEW.id;
                trigger_row.old = hstore(OLD.*) - excluded_cols;
                trigger_row.values = (hstore(NEW.*) - hstore(trigger_row.old)) - excluded_cols;
                IF (trigger_row.values = '') THEN
                    -- nothing changed, ignore
                    trigger_row.state = 'IGNORE';
                END IF;
                IF (OLD.sfid IS NOT NULL) THEN
                    trigger_row.sfid = OLD.sfid;
                END IF;
            END IF;

            INSERT INTO "salesforce"."_trigger_log" VALUES (trigger_row.*);

            RETURN NULL;
        END;
$$
;

create trigger hc_campaign_type__c_logtrigger
	after insert or update or delete
	on campaign_type__c
	for each row
	execute procedure salesforce.hc_campaign_type__c_logger()
;

